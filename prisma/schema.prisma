generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  passwordHash  String?
  role          UserRole  @default(EMPLOYEE)
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  createdFolders   Folder[]
  ownedCourses     Course[]         @relation("CourseOwner")
  enrollments      Enrollment[]
  progress         Progress[]
  attempts         Attempt[]
  employeeStatuses EmployeeStatus[]
}

enum UserRole {
  OWNER
  PARTNER
  POINT
  EMPLOYEE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id         String   @id @default(cuid())
  name       String
  shelfLifeH Int
  tenantId   String
  createdAt  DateTime @default(now())
  labels     Label[]
}

model Label {
  id        String   @id @default(cuid())
  productId String
  printedAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  tenantId  String
  product   Product  @relation(fields: [productId], references: [id])
}

model Folder {
  id          String         @id @default(cuid())
  name        String
  description String?
  parentId    String?
  tenantId    String
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  parent      Folder?        @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]       @relation("FolderHierarchy")
  createdBy   User           @relation(fields: [createdById], references: [id])
  fileAccess  FileAccess[]
  folderAccess FolderAccess[]
}

model FileAccess {
  id       String @id @default(cuid())
  folderId String
  roleId   String
  folder   Folder @relation(fields: [folderId], references: [id])
  role     Role   @relation(fields: [roleId], references: [id])

  @@unique([folderId, roleId])
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  permissions    Json
  inheritsFrom   String?        @unique
  tenantId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  partner        String?
  lastModifiedAt DateTime?
  lastModifiedBy String?
  fileAccess     FileAccess[]
  folderAccess   FolderAccess[]
}

model FolderAccess {
  id       String @id @default(cuid())
  folderId String
  roleId   String
  folder   Folder @relation(fields: [folderId], references: [id])
  role     Role   @relation(fields: [roleId], references: [id])

  @@unique([folderId, roleId])
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?
  ownerId     String
  tenantId    String
  category    String?
  level       String?
  durationMin Int?
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  owner       User         @relation("CourseOwner", fields: [ownerId], references: [id])
  modules     CourseModule[]
  enrollments Enrollment[]
}

model CourseModule {
  id       String  @id @default(cuid())
  courseId String
  title    String
  order    Int
  course   Course  @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
}

model Lesson {
  id       String @id @default(cuid())
  moduleId String
  title    String
  type     String
  content  String?
  order    Int
  module   CourseModule @relation(fields: [moduleId], references: [id])
  quiz     Quiz?
}

model Quiz {
  id       String @id @default(cuid())
  lessonId String @unique
  title    String
  passPct  Int
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  questions QuizQuestion[]
}

model QuizQuestion {
  id      String @id @default(cuid())
  quizId  String
  text    String
  kind    String
  quiz    Quiz @relation(fields: [quizId], references: [id])
  answers QuizAnswer[]
}

model QuizAnswer {
  id         String @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean
  question   QuizQuestion @relation(fields: [questionId], references: [id])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  tenantId  String
  enrolledAt DateTime @default(now())
  completedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  completedAt DateTime?
  user      User     @relation(fields: [userId], references: [id])
}

model Attempt {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  score     Int
  passed    Boolean
  attemptedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model EmployeeStatus {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  status    String
  notes     String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
}