generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String?
  passwordHash     String?
  tenantId         String?
  pointId          String?
  isPlatformOwner  Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  employeeStatuses EmployeeStatus[]
  createdFolders   Folder[]
  point            Point?           @relation(fields: [pointId], references: [id])
  tenant           Tenant?          @relation(fields: [tenantId], references: [id])
  UserRole         UserRole[]
  ownedCourses     Course[]         @relation("CourseOwner")
  progress         Progress[]
  attempts         Attempt[]
}

model Role {
  id             String         @id @default(cuid())
  name           String         @unique
  permissions    Json
  inheritsFrom   String?        @unique
  tenantId       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  partner        String?
  lastModifiedAt DateTime?
  lastModifiedBy String?
  fileAccess     FileAccess[]
  folderAccess   FolderAccess[]
  userRoles      UserRole[]

  @@index([tenantId])
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  tenantId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([roleId])
}

model Subscription {
  id               String    @id @default(cuid())
  tenantId         String    @unique
  plan             String    @default("BASIC")
  status           String    @default("INACTIVE")
  currentPeriodEnd DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tenant           Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Product {
  id         String   @id @default(cuid())
  name       String
  shelfLifeH Int
  tenantId   String
  createdAt  DateTime @default(now())
  labels     Label[]
}

model Label {
  id        String   @id @default(cuid())
  productId String
  printedAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  tenantId  String
  product   Product  @relation(fields: [productId], references: [id])
}

model Folder {
  id          String         @id @default(cuid())
  name        String
  description String?
  parentId    String?
  tenantId    String
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  files       File[]
  parent      Folder?        @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]       @relation("FolderHierarchy")
  creator     User           @relation(fields: [createdById], references: [id])
  accessRoles FolderAccess[]

  @@index([tenantId])
  @@index([parentId])
}

model File {
  id           String       @id @default(cuid())
  name         String
  displayName  String?
  size         Int
  tenantId     String
  description  String?
  folderId     String?
  originalName String
  updatedAt    DateTime     @updatedAt
  viewCount    Int          @default(0)
  checksum     String?      @unique
  createdAt    DateTime     @default(now())
  createdById  String       @default("")
  ext          String?
  mime         String       @default("application/octet-stream")
  storageKey   String       @default("")
  thumbKey     String?
  folder       Folder?      @relation(fields: [folderId], references: [id])
  accessRoles  FileAccess[]

  @@index([tenantId])
  @@index([folderId])
  @@index([createdById])
  @@index([storageKey])
}

model FolderAccess {
  id        String  @id @default(cuid())
  folderId  String
  roleId    String
  canRead   Boolean @default(true)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  folder    Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([folderId, roleId])
}

model FileAccess {
  id        String  @id @default(cuid())
  fileId    String
  roleId    String
  canRead   Boolean @default(true)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  file      File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, roleId])
}

model Course {
  id            String       @id @default(cuid())
  // Multi-tenant. Keep optional for backward compatibility in existing data.
  tenantId      String?
  title         String
  description   String?
  category      String?
  level         String?
  durationMin   Int?
  coverUrl      String?
  isPublished   Boolean     @default(false)
  // Legacy/owner fields
  ownerId       String
  createdById   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // New learning wizard fields
  accessRoles   Json?
  questionType  QuestionType?
  deadlineAt    DateTime?

  // Old relations
  lessons       Lesson[]
  quizzes       Quiz[]
  assignments   Assignment[]
  progress      Progress[]
  // New relations
  modules       CourseModule[]
  enrollments   Enrollment[]
  owner         User         @relation("CourseOwner", fields: [ownerId], references: [id])
  tenant        Tenant?      @relation(fields: [tenantId], references: [id])
  questions     CourseQuestion[]
  attempts      CourseAttempt[]

  @@index([tenantId])
  @@index([ownerId])
  @@index([tenantId, isPublished])
}

model Lesson {
  id         String       @id @default(cuid())
  // New structure via modules
  moduleId   String?
  // Back-compat for existing pages
  courseId   String?
  title      String
  type       LessonType?
  content    String?
  order      Int          @default(0)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  // Relations
  module     CourseModule? @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  course     Course?       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes    Quiz[]
  progresses LessonProgress[]

  @@index([moduleId, order])
}

enum LessonType {
  TEXT
  VIDEO
  FILE
  IMAGE
}

model CourseModule {
  id       String  @id @default(cuid())
  courseId String
  title    String
  order    Int     @default(0)
  lessons  Lesson[]

  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId, order])
}

model Tenant {
  id                 String              @id @default(cuid())
  name               String
  email              String?
  region             String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  equipment          Equipment[]
  points             Point[]
  subscriptions      Subscription?
  temperatureRecords TemperatureRecord[]
  users              User[]
  courses            Course[]
}

model Point {
  id                 String              @id @default(cuid())
  name               String
  address            String?
  phone              String?
  email              String?
  tenantId           String
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  employeeStatuses   EmployeeStatus[]
  equipment          Equipment[]
  healthRecords      HealthRecord[]
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  temperatureRecords TemperatureRecord[]
  users              User[]
}

model HealthRecord {
  id           String   @id @default(cuid())
  employeeName String
  position     String
  date         DateTime
  temperature  Float
  symptoms     Json
  healthStatus String
  notes        String?
  responsible  String
  tenantId     String
  pointId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  point        Point?   @relation(fields: [pointId], references: [id])

  @@index([tenantId])
  @@index([pointId])
  @@index([date])
}

model EmployeeStatus {
  id         String   @id @default(cuid())
  employeeId String
  date       DateTime
  status     String
  notes      String?
  updatedBy  String
  tenantId   String
  pointId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  point      Point?   @relation(fields: [pointId], references: [id])
  employee   User     @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@index([tenantId])
  @@index([pointId])
  @@index([date])
  @@index([employeeId])
}

model Equipment {
  id                 String              @id @default(cuid())
  type               String
  zone               String
  status             String              @default("active")
  description        String?
  serialNumber       String?
  tenantId           String
  pointId            String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  point              Point?              @relation(fields: [pointId], references: [id])
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  temperatureRecords TemperatureRecord[]

  @@index([tenantId])
  @@index([pointId])
  @@index([type])
  @@index([zone])
}

model TemperatureRecord {
  id          String    @id @default(cuid())
  equipmentId String
  temperature Float
  date        DateTime
  time        String?
  notes       String?
  recordedBy  String?
  tenantId    String
  pointId     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  period      String?
  point       Point?    @relation(fields: [pointId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  equipment   Equipment @relation(fields: [equipmentId], references: [id])

  @@unique([equipmentId, date, period], name: "equipmentId_date_period")
  @@index([tenantId])
  @@index([pointId])
  @@index([equipmentId])
  @@index([date])
}

// Learning Module Models

model Quiz {
  id        String         @id @default(cuid())
  // New relation to lesson (preferred)
  lessonId  String?
  // Back-compat relation to course
  courseId  String?
  title     String
  passPct   Int            @default(80)
  questions QuizQuestion[]
  attempts  Attempt[]
  createdAt DateTime       @default(now())
  lesson    Lesson?        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  course    Course?        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

// === New Learning Wizard models (co-exist with legacy) ===

enum QuestionType {
  CHOICE
  FREE
}

model CourseQuestion {
  id        String        @id @default(cuid())
  courseId  String
  order     Int           @default(0)
  text      String
  type      QuestionType
  options   AnswerOption[]
  responses Response[]

  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId, order])
}

model AnswerOption {
  id         String         @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean        @default(false)

  question   CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CourseAttempt {
  id        String        @id @default(cuid())
  tenantId  String
  courseId  String
  userId    String
  scorePct  Int?
  createdAt DateTime      @default(now())

  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  responses Response[]

  @@index([tenantId, userId, courseId])
}

model Response {
  id              String         @id @default(cuid())
  attemptId       String
  questionId      String
  answerOptionId  String?
  freeText        String?

  attempt   CourseAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question  CourseQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id       String       @id @default(cuid())
  quizId   String
  text     String
  kind     String       // "single" | "multiple"
  answers  QuizAnswer[]
  quiz     Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model QuizAnswer {
  id         String        @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean       @default(false)
  question   QuizQuestion  @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
}

model Assignment {
  id        String    @id @default(cuid())
  courseId  String
  tenantId  String?
  userId    String?
  roleName  String?   // e.g. "EMPLOYEE" | "MANAGER"
  createdAt DateTime  @default(now())
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  Progress[]

  @@index([courseId])
  @@index([tenantId])
  @@index([userId])
  @@index([roleName])
}

model Progress {
  id         String    @id @default(cuid())
  courseId   String
  userId     String
  assignmentId String?
  status     String    // "NOT_STARTED" | "IN_PROGRESS" | "DONE"
  lessonsDone Int      @default(0)
  score      Int?      // итоговый балл за квиз
  updatedAt  DateTime  @updatedAt
  course     Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignment Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([courseId, userId])
  @@index([courseId])
  @@index([userId])
  @@index([status])
}

model Attempt {
  id        String   @id @default(cuid())
  quizId    String
  userId    String
  answers   Json     // {questionId: [answerId]}
  score     Int
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([quizId])
  @@index([userId])
  @@index([createdAt])
}

// New enrollment and progress tracking (co-exists with legacy models)
model Enrollment {
  id        String             @id @default(cuid())
  tenantId  String
  userId    String
  courseId  String
  status    EnrollmentStatus   @default(ACTIVE)
  createdAt DateTime           @default(now())

  course    Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([tenantId, userId])
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
}

enum AppRole {
  OWNER
  PARTNER
  POINT
  PERSONAL
}

model RolePageAccess {
  id        String   @id @default(cuid())
  tenantId  String
  role      AppRole
  pageSlug  String
  allowed   Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, role, pageSlug])
  @@index([tenantId, role])
}

model LessonProgress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  scorePct  Int?
  updatedAt DateTime @updatedAt

  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}
