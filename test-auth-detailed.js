// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testAuthDetailed() {
  try {
    console.log('üîß –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    const email = 'ar.em.v@yandex.ru';
    const password = 'admin123';
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email },
      include: {
        tenant: true,
        point: true
      }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`üìß Email: ${user.email}`);
    console.log(`üëë isPlatformOwner: ${user.isPlatformOwner}`);
    console.log(`üè¢ tenantId: ${user.tenantId}`);
    console.log(`üìç pointId: ${user.pointId}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    if (!user.passwordHash) {
      console.log('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return;
    }
    
    const isPasswordCorrect = await bcrypt.compare(password, user.passwordHash);
    console.log(`üîê –ü–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${isPasswordCorrect}`);
    
    if (!isPasswordCorrect) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      return;
    }
    
    // 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
    let role = null;
    if (user.isPlatformOwner) {
      role = "Owner";
    } else if (user.tenant && !user.point) {
      role = "Partner";
    } else if (user.point) {
      role = "Point";
    }
    
    console.log(`üé≠ –†–æ–ª—å: ${role}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
    if (role) {
      const roleRecord = await prisma.role.findUnique({
        where: { name: role }
      });
      console.log(`üé≠ –†–æ–ª—å –≤ –±–∞–∑–µ: ${roleRecord ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      
      if (roleRecord) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é
        const userRole = await prisma.userRole.findFirst({
          where: {
            userId: user.id,
            roleId: roleRecord.id
          }
        });
        console.log(`üîó –°–≤—è–∑—å —Å —Ä–æ–ª—å—é: ${userRole ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      }
    }
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testAuthDetailed();
