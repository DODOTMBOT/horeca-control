// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—Ö–æ–¥–∞
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testDatabaseConnection() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await prisma.$connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: 'ar.em.v@yandex.ru' },
      include: {
        UserRole: {
          include: {
            role: true
          }
        }
      }
    });
    
    if (user) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
      console.log(`üìß Email: ${user.email}`);
      console.log(`üëë –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${user.isPlatformOwner}`);
      console.log(`üîë –ü–∞—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${!!user.passwordHash}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏
      if (user.UserRole && user.UserRole.length > 0) {
        console.log('üé≠ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
        user.UserRole.forEach(ur => {
          console.log(`  - ${ur.role.name}`);
        });
      } else {
        console.log('‚ö†Ô∏è  –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π');
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const testPassword = 'admin123';
      const passwordMatch = await bcrypt.compare(testPassword, user.passwordHash);
      console.log(`üîê –ü–∞—Ä–æ–ª—å "admin123" –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${passwordMatch}`);
      
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testDatabaseConnection();
