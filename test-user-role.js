// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ getUserRole
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testUserRole() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ getUserRole...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: 'ar.em.v@yandex.ru' },
      include: {
        tenant: {
          select: { id: true }
        },
        point: {
          select: { id: true }
        }
      }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`üìß Email: ${user.email}`);
    console.log(`üëë isPlatformOwner: ${user.isPlatformOwner}`);
    console.log(`üè¢ tenantId: ${user.tenantId}`);
    console.log(`üìç pointId: ${user.pointId}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ getUserRole
    let role = null;
    
    if (user.isPlatformOwner) {
      role = "Owner";
    } else if (user.tenant && !user.point) {
      role = "Partner";
    } else if (user.point) {
      role = "Point";
    }
    
    console.log(`üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å: ${role}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testUserRole();
