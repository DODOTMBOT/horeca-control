const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: "file:./prisma/dev.db"
    }
  }
})

async function setupRoles() {
  try {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π –¥–ª—è HoReCa...\n')
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ —Å –∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏
    const roles = [
      {
        name: 'PLATFORM_OWNER',
        permissions: {
          all: true,
          platform: {
            manageOrganizations: true,
            managePlatformSettings: true,
            viewAllData: true
          }
        },
        description: '–í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º'
      },
      {
        name: 'ORGANIZATION_OWNER',
        permissions: {
          organization: {
            manageUsers: true,
            manageRoles: true,
            manageSettings: true,
            viewReports: true
          },
          modules: {
            labeling: true,
            files: true,
            learning: true,
            haccp: true,
            medicalBooks: true,
            scheduleSalary: true,
            employees: true,
            equipment: true,
            billing: true
          }
        },
        description: '–í–ª–∞–¥–µ–ª–µ—Ü –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π'
      },
      {
        name: 'MANAGER',
        permissions: {
          organization: {
            manageUsers: false,
            manageRoles: false,
            manageSettings: false,
            viewReports: true
          },
          modules: {
            labeling: true,
            files: true,
            learning: true,
            haccp: true,
            medicalBooks: true,
            scheduleSalary: true,
            employees: true,
            equipment: true,
            billing: false
          }
        },
        description: '–ú–µ–Ω–µ–¥–∂–µ—Ä - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
      },
      {
        name: 'POINT_MANAGER',
        permissions: {
          organization: {
            manageUsers: false,
            manageRoles: false,
            manageSettings: false,
            viewReports: true
          },
          modules: {
            labeling: true,
            files: true,
            learning: true,
            haccp: true,
            medicalBooks: true,
            scheduleSalary: true,
            employees: true,
            equipment: true,
            billing: false
          },
          point: {
            managePointSettings: true,
            managePointEmployees: true,
            viewPointReports: true
          }
        },
        description: '–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—á–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–æ–π'
      },
      {
        name: 'EMPLOYEE',
        permissions: {
          organization: {
            manageUsers: false,
            manageRoles: false,
            manageSettings: false,
            viewReports: false
          },
          modules: {
            labeling: true,
            files: false,
            learning: true,
            haccp: true,
            medicalBooks: false,
            scheduleSalary: false,
            employees: false,
            equipment: false,
            billing: false
          }
        },
        description: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ - –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã'
      }
    ]
    
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π...')
    
    for (const roleData of roles) {
      const role = await prisma.role.upsert({
        where: { name: roleData.name },
        update: {
          permissions: roleData.permissions,
          tenantId: null, // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
          partner: 'HoReCa Platform'
        },
        create: {
          name: roleData.name,
          permissions: roleData.permissions,
          tenantId: null, // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏
          partner: 'HoReCa Platform'
        }
      })
      
      console.log(`‚úÖ –†–æ–ª—å ${roleData.name} —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞`)
      console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${roleData.description}`)
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–æ–ª—å ORGANIZATION_OWNER
    const demoUser = await prisma.user.findUnique({
      where: { email: 'owner@demo.local' }
    })
    
    if (demoUser) {
      const organizationOwnerRole = await prisma.role.findUnique({
        where: { name: 'ORGANIZATION_OWNER' }
      })
      
      if (organizationOwnerRole) {
        await prisma.userRole.upsert({
          where: { 
            userId_tenantId: { 
              userId: demoUser.id, 
              tenantId: demoUser.tenantId 
            } 
          },
          update: { roleId: organizationOwnerRole.id },
          create: { 
            userId: demoUser.id, 
            roleId: organizationOwnerRole.id, 
            tenantId: demoUser.tenantId 
          }
        })
        
        console.log(`\nüîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${demoUser.email} –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —Ä–æ–ª—å ORGANIZATION_OWNER`)
      }
    }
    
    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

setupRoles()
