// –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API
async function testLoginAPI() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ API...');
    
    // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    const csrfResponse = await fetch('http://localhost:3000/api/auth/csrf');
    const csrfData = await csrfResponse.json();
    console.log('‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', csrfData.csrfToken);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏
    const loginResponse = await fetch('http://localhost:3000/api/auth/callback/credentials', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        email: 'ar.em.v@yandex.ru',
        password: 'admin123',
        csrfToken: csrfData.csrfToken,
        callbackUrl: 'http://localhost:3000/dashboard'
      })
    });
    
    console.log('üìä –°—Ç–∞—Ç—É—Å –≤—Ö–æ–¥–∞:', loginResponse.status);
    console.log('üìä URL –æ—Ç–≤–µ—Ç–∞:', loginResponse.url);
    
    if (loginResponse.status === 200) {
      console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
      const sessionResponse = await fetch('http://localhost:3000/api/auth/session');
      const sessionData = await sessionResponse.json();
      console.log('üë§ –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', sessionData);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      const errorText = await loginResponse.text();
      console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testLoginAPI();
