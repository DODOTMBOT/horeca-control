'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Plus, Settings, MapPin, Trash2 } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface Equipment {
  id: string;
  type: string;
  zone: string;
  status: 'active' | 'inactive' | 'maintenance';
  createdAt: string;
  updatedAt: string;
}

const EQUIPMENT_TYPES = [
  '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
  '–ú–æ—Ä–æ–∑–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞',
  '–ü–ª–∏—Ç–∞',
  '–î—É—Ö–æ–≤–æ–π —à–∫–∞—Ñ',
  '–ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å',
  '–ü–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞',
  '–ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞',
  '–í–µ—Å—ã',
  '–ú—è—Å–æ—Ä—É–±–∫–∞',
  '–ë–ª–µ–Ω–¥–µ—Ä',
  '–î—Ä—É–≥–æ–µ'
];

const ZONES = [
  '–ö—É—Ö–Ω—è',
  '–°–∫–ª–∞–¥',
  '–•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞',
  '–ú–æ—Ä–æ–∑–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞',
  '–ë–∞—Ä',
  '–ó–∞–ª',
  '–ü–æ–¥—Å–æ–±–∫–∞',
  '–î—Ä—É–≥–æ–µ'
];

export default function EquipmentPage() {
  const { data: session, status } = useSession();
  const [equipment, setEquipment] = useState<Equipment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isCreating, setIsCreating] = useState(false);
  const [showForm, setShowForm] = useState(false);
  const [formData, setFormData] = useState({
    type: '',
    zone: ''
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
  const fetchEquipment = async () => {
    try {
      console.log('üîÑ Fetching equipment...');
      setIsLoading(true);
      const response = await fetch('/api/equipment');
      console.log('üì° Equipment fetch response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìã Equipment data received:', data);
        setEquipment(data.equipment || []);
        console.log('‚úÖ Equipment list updated:', data.equipment || []);
      } else {
        console.error('‚ùå Failed to fetch equipment:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Error fetching equipment:', error);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (status === 'authenticated') {
      fetchEquipment();
    }
  }, [status]);

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const handleCreateEquipment = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.type || !formData.zone) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    if (!session?.user?.tenantId) {
      alert('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω tenant ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
      return;
    }

    try {
      setIsCreating(true);
      console.log('üöÄ Sending equipment creation request:', formData);
      
      const response = await fetch('/api/equipment', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      console.log('üì° Response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('‚úÖ Equipment created:', result);
        setFormData({ type: '', zone: '' });
        setShowForm(false);
        fetchEquipment(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        const error = await response.json();
        console.error('‚ùå API Error:', error);
        alert(`–û—à–∏–±–∫–∞: ${error.error}`);
      }
    } catch (error) {
      console.error('‚ùå Network Error:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsCreating(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const handleDeleteEquipment = async (id: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?')) {
      return;
    }

    try {
      const response = await fetch(`/api/equipment/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        fetchEquipment(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
      }
    } catch (error) {
      console.error('Error deleting equipment:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'inactive':
        return 'bg-gray-100 text-gray-800 border-gray-200';
      case 'maintenance':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'active':
        return '–ê–∫—Ç–∏–≤–Ω–æ';
      case 'inactive':
        return '–ù–µ–∞–∫—Ç–∏–≤–Ω–æ';
      case 'maintenance':
        return '–ù–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (status === 'loading' || isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-200 rounded w-64 mb-4"></div>
            <div className="h-4 bg-gray-200 rounded w-96 mb-8"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[1, 2, 3, 4, 5, 6].map((i) => (
                <div key={i} className="bg-white rounded-lg shadow-sm border p-6">
                  <div className="h-6 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2 mb-4"></div>
                  <div className="h-4 bg-gray-200 rounded w-full mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-2/3"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –ú–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
          </p>
        </div>

        {/* Add Equipment Button */}
        <div className="mb-6">
          <Button
            onClick={() => setShowForm(true)}
            className="flex items-center gap-2"
          >
            <Plus className="w-4 h-4" />
            –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
          </Button>
        </div>

        {/* Add Equipment Modal */}
        <Dialog open={showForm} onOpenChange={setShowForm}>
          <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</DialogTitle>
              <DialogDescription>
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
              </DialogDescription>
            </DialogHeader>
            
            <form onSubmit={handleCreateEquipment} className="space-y-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è *
                  </label>
                  <Input
                    type="text"
                    value={formData.type}
                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫)"
                    className="w-full"
                    list="equipment-types"
                    required
                  />
                  <datalist id="equipment-types">
                    {EQUIPMENT_TYPES.map((type) => (
                      <option key={type} value={type} />
                    ))}
                  </datalist>
                  <p className="text-xs text-gray-500 mt-1">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã: –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, –ü–ª–∏—Ç–∞, –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞, –ú–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∞—è –ø–µ—á—å
                  </p>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ó–æ–Ω–∞ *
                  </label>
                  <Input
                    type="text"
                    value={formData.zone}
                    onChange={(e) => setFormData({ ...formData, zone: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–æ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—É—Ö–Ω—è)"
                    className="w-full"
                    list="zones"
                    required
                  />
                  <datalist id="zones">
                    {ZONES.map((zone) => (
                      <option key={zone} value={zone} />
                    ))}
                  </datalist>
                  <p className="text-xs text-gray-500 mt-1">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–æ–Ω—ã: –ö—É—Ö–Ω—è, –°–∫–ª–∞–¥, –ë–∞—Ä, –•–æ–ª–æ–¥–∏–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞
                  </p>
                </div>
              </div>
              
              <div className="flex gap-3 pt-4 border-t">
                <Button
                  type="submit"
                  disabled={isCreating}
                  className="flex items-center gap-2"
                >
                  {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'}
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setShowForm(false);
                    setFormData({ type: '', zone: '' });
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>

        {/* Equipment List */}
        {equipment.length === 0 ? (
          <Card>
            <CardContent className="text-center py-12">
              <Settings className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
              </h3>
              <p className="text-gray-600 mb-4">
                –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
              </p>
              <Button onClick={() => setShowForm(true)}>
                <Plus className="w-4 h-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {equipment.map((item) => (
              <Card key={item.id} className="hover:shadow-md transition-shadow">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                        <Settings className="w-5 h-5 text-blue-600" />
                      </div>
                      <div>
                        <CardTitle className="text-lg">{item.type}</CardTitle>
                        <div className="flex items-center gap-1 text-sm text-gray-600">
                          <MapPin className="w-4 h-4" />
                          {item.zone}
                        </div>
                      </div>
                    </div>
                    <div className="flex gap-1">
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => handleDeleteEquipment(item.id)}
                        className="text-red-600 hover:text-red-700 hover:bg-red-50"
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(item.status)}`}>
                        {getStatusLabel(item.status)}
                      </span>
                    </div>
                    <div className="text-xs text-gray-500">
                      –°–æ–∑–¥–∞–Ω–æ: {new Date(item.createdAt).toLocaleDateString('ru-RU')}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
