// –¢–µ—Å—Ç JWT callback
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testJWTCallback() {
  try {
    console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT callback...');
    
    const userId = 'cmge5ugt20000l8vonqhyilcl'; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º JWT callback
    const dbUser = await prisma.user.findUnique({
      where: { id: userId },
      include: {
        tenant: true,
        point: true
      },
    });
    
    if (!dbUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:');
    console.log(`üìß Email: ${dbUser.email}`);
    console.log(`üëë isPlatformOwner: ${dbUser.isPlatformOwner}`);
    console.log(`üè¢ tenantId: ${dbUser.tenantId}`);
    console.log(`üìç pointId: ${dbUser.pointId}`);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ –ª–æ–≥–∏–∫–µ –∏–∑ getUserRole
    let userRole = null;
    if (dbUser.isPlatformOwner) {
      userRole = "Owner";
    } else if (dbUser.tenant && !dbUser.point) {
      userRole = "Partner";
    } else if (dbUser.point) {
      userRole = "Point";
    }
    
    console.log(`üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Ä–æ–ª—å: ${userRole}`);
    
    // –í –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ä–æ–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const roles = userRole ? [userRole] : [];
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è JWT —Ç–æ–∫–µ–Ω–∞:');
    console.log(`  - roles: ${JSON.stringify(roles)}`);
    console.log(`  - role: ${userRole}`);
    console.log(`  - tenantId: ${dbUser.tenantId}`);
    console.log(`  - pointId: ${dbUser.pointId}`);
    console.log(`  - isPlatformOwner: ${userRole === "Owner"}`);
    
    console.log('‚úÖ JWT callback —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testJWTCallback();
