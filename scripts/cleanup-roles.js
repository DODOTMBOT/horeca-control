const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupRoles() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–æ–ª–µ–π...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏
    await prisma.userRole.deleteMany({});
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏');
    
    await prisma.role.deleteMany({});
    console.log('‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ä–æ–ª–∏');
    
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ä–æ–ª–∏
    const roles = [
      {
        name: 'Owner',
        permissions: { 
          all: true,
          platformManagement: true,
          userManagement: true,
          billingManagement: true,
          pointManagement: true,
          employeeManagement: true,
          labeling: true,
          files: true,
          learning: true,
          haccp: true,
          medicalBooks: true,
          scheduleSalary: true
        },
      },
      {
        name: 'Partner',
        permissions: { 
          pointManagement: true,
          employeeManagement: true,
          labeling: true,
          files: true,
          learning: true,
          haccp: true,
          medicalBooks: true,
          scheduleSalary: true
        },
      },
      {
        name: 'Point',
        permissions: { 
          employeeManagement: true,
          labeling: true,
          files: true,
          learning: true,
          haccp: true,
          medicalBooks: true,
          scheduleSalary: true
        },
      },
    ];

    for (const roleData of roles) {
      const role = await prisma.role.create({
        data: {
          name: roleData.name,
          permissions: roleData.permissions
        }
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å "${role.name}"`);
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å Owner –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–≤–ª–∞–¥–µ–ª—å—Ü—É
    const ownerRole = await prisma.role.findUnique({
      where: { name: 'Owner' }
    });

    const ownerUser = await prisma.user.findUnique({
      where: { email: 'ar.em.v@yandex.ru' }
    });

    if (ownerRole && ownerUser) {
      await prisma.userRole.create({
        data: {
          userId: ownerUser.id,
          roleId: ownerRole.id
        }
      });
      console.log('‚úÖ –†–æ–ª—å Owner –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–≤–ª–∞–¥–µ–ª—å—Ü—É');
    }

    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:');
    console.log('  - Owner (–≤–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)');
    console.log('  - Partner (–ø–∞—Ä—Ç–Ω–µ—Ä)');
    console.log('  - Point (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–∫–∏)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–æ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupRoles();
