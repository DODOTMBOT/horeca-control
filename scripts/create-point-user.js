const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const { randomBytes } = require('crypto');

const prisma = new PrismaClient();

async function createPointUser() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ "–ú–æ—Å–∫–≤–∞-1"...');
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ—á–∫—É "–ú–æ—Å–∫–≤–∞-1"
    const point = await prisma.point.findFirst({
      where: {
        name: '–ú–æ—Å–∫–≤–∞-1'
      },
      include: {
        tenant: true
      }
    });

    if (!point) {
      console.log('‚ùå –¢–æ—á–∫–∞ "–ú–æ—Å–∫–≤–∞-1" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–æ—á–∫–∞: ${point.name} (ID: ${point.id})`);
    console.log(`   Tenant: ${point.tenant?.name || 'N/A'} (ID: ${point.tenantId})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–π —Ç–æ—á–∫–∏
    const existingUser = await prisma.user.findFirst({
      where: {
        pointId: point.id,
        UserRole: {
          some: {
            role: {
              name: 'Point'
            }
          }
        }
      }
    });

    if (existingUser) {
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–æ—á–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${existingUser.email}`);
      console.log(`   ID: ${existingUser.id}`);
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
    const pointLogin = `moscow1_${point.id.slice(-6)}`;
    const pointPassword = randomBytes(8).toString("base64url");
    const passwordHash = await bcrypt.hash(pointPassword, 12);

    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ—á–∫–∏...');

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ—á–∫–∏
    const pointUser = await prisma.user.create({
      data: {
        email: `${pointLogin}@moscow1.local`,
        name: `${point.name} (Point User)`,
        passwordHash,
        tenantId: point.tenantId,
        pointId: point.id,
        UserRole: {
          create: [{
            role: { connect: { name: "Point" } },
            tenantId: point.tenantId
          }]
        }
      },
      include: {
        UserRole: {
          include: { role: true }
        }
      }
    });

    console.log('\nüéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–æ—á–∫–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${pointUser.email}`);
    console.log(`   –õ–æ–≥–∏–Ω: ${pointLogin}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${pointPassword}`);
    console.log(`   –ò–º—è: ${pointUser.name}`);
    console.log(`   –†–æ–ª–∏: ${pointUser.UserRole.map(ur => ur.role?.name).filter(Boolean).join(', ')}`);
    console.log(`   –¢–æ—á–∫–∞: ${point.name}`);
    console.log(`   Tenant: ${point.tenant?.name || 'N/A'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createPointUser();
