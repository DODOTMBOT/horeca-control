const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createOwner() {
  try {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const password = 'admin123'; // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞
    const passwordHash = await bcrypt.hash(password, 12);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞
    const owner = await prisma.user.upsert({
      where: { email: 'ar.em.v@yandex.ru' },
      update: {
        passwordHash,
        isPlatformOwner: true,
        name: 'Platform Owner'
      },
      create: {
        email: 'ar.em.v@yandex.ru',
        passwordHash,
        name: 'Platform Owner',
        isPlatformOwner: true
      }
    });

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–≤–ª–∞–¥–µ–ª–µ—Ü —Å–æ–∑–¥–∞–Ω:');
    console.log(`üìß Email: ${owner.email}`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å: ${password}`);
    console.log(`üëë –í–ª–∞–¥–µ–ª–µ—Ü –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: ${owner.isPlatformOwner}`);

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ–ª–∏
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ä–æ–ª–µ–π...');
    
    const baseRoles = [
      {
        name: 'Owner',
        permissions: { 
          all: true,
          platformManagement: true,
          userManagement: true,
          billingManagement: true
        },
      },
      {
        name: 'Partner',
        permissions: { 
          pointManagement: true,
          employeeManagement: true,
          labeling: true,
          files: true,
          learning: true,
          haccp: true,
          medicalBooks: true,
          scheduleSalary: true
        },
      },
      {
        name: 'Point',
        permissions: { 
          employeeManagement: true,
          labeling: true,
          files: true,
          learning: true,
          haccp: true,
          medicalBooks: true,
          scheduleSalary: true
        },
      },
    ];

    for (const roleData of baseRoles) {
      await prisma.role.upsert({
        where: { name: roleData.name },
        update: { permissions: roleData.permissions },
        create: { name: roleData.name, permissions: roleData.permissions },
      });
      console.log(`‚úÖ –†–æ–ª—å "${roleData.name}" —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å Owner –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const ownerRole = await prisma.role.findUnique({
      where: { name: 'Owner' }
    });

    if (ownerRole) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å
      const existingUserRole = await prisma.userRole.findFirst({
        where: {
          userId: owner.id,
          roleId: ownerRole.id
        }
      });

      if (!existingUserRole) {
        await prisma.userRole.create({
          data: {
            userId: owner.id,
            roleId: ownerRole.id
          }
        });
        console.log('‚úÖ –†–æ–ª—å Owner –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      } else {
        console.log('‚úÖ –†–æ–ª—å Owner —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      }
    }

    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:');
    console.log(`üåê URL: http://localhost:3000/signin`);
    console.log(`üìß Email: ar.em.v@yandex.ru`);
    console.log(`üîë –ü–∞—Ä–æ–ª—å: ${password}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createOwner();
