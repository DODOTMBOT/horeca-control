const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');
const { randomBytes } = require('crypto');

const prisma = new PrismaClient();

async function resetPointPassword() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–∫–∏ "–ú–æ—Å–∫–≤–∞-1"...');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ—á–∫–∏
    const pointUser = await prisma.user.findFirst({
      where: {
        pointId: 'point_test2',
        UserRole: {
          some: {
            role: {
              name: 'Point'
            }
          }
        }
      },
      include: {
        UserRole: {
          include: { role: true }
        },
        point: true,
        tenant: true
      }
    });

    if (!pointUser) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${pointUser.name}`);
    console.log(`   Email: ${pointUser.email}`);
    console.log(`   –¢–æ—á–∫–∞: ${pointUser.point?.name || 'N/A'}`);
    console.log(`   Tenant: ${pointUser.tenant?.name || 'N/A'}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const newPassword = randomBytes(8).toString("base64url");
    const passwordHash = await bcrypt.hash(newPassword, 12);

    console.log('üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è...');

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
    await prisma.user.update({
      where: { id: pointUser.id },
      data: { passwordHash }
    });

    console.log('\nüéâ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${pointUser.email}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${newPassword}`);
    console.log(`   –ò–º—è: ${pointUser.name}`);
    console.log(`   –†–æ–ª–∏: ${pointUser.UserRole.map(ur => ur.role?.name).filter(Boolean).join(', ')}`);
    console.log(`   –¢–æ—á–∫–∞: ${pointUser.point?.name || 'N/A'}`);
    console.log(`   Tenant: ${pointUser.tenant?.name || 'N/A'}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetPointPassword();
